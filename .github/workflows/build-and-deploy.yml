name: Build and Deploy Weather App

# Trigger the workflow only on pushes to the main branch
on:
  push:
    branches:
      - main

# Define environment variables
env:
  BUILD_NUMBER: ${{ github.run_number }}  # Use GitHub run number for versioning

# Set permissions for the workflow
permissions:
  contents: write  # Allow writing to repository if needed

jobs:
  build:
    runs-on: self-hosted  # Your RHEL self-hosted runner
    outputs:
      binary_name: ${{ steps.set_output.outputs.binary_name }}  # Output binary name for the deploy job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up virtual environment
      - name: Set up virtual environment
        run: python3 -m venv venv

      # Step 3: Install dependencies in the virtual environment
      - name: Install dependencies
        run: |
          source venv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          python3 -m pip install pyinstaller

      # Step 4: Build the binary inside the virtual environment
      - name: Build binary and set outputs
        id: set_output
        run: |
          set -euxo pipefail  # Enable strict error handling
          ./venv/bin/python3 -m PyInstaller --onefile weather.py  # Corrected module name with capital 'P'
          echo "Binary created at dist/weather"

          # Rename the binary with build number
          BIN_NAME="weather-main-${BUILD_NUMBER}"
          mv dist/weather dist/${BIN_NAME}
          echo "binary_name=${BIN_NAME}" >> $GITHUB_OUTPUT

      # Step 5: Upload the binary as an artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_output.outputs.binary_name }}
          path: dist/${{ steps.set_output.outputs.binary_name }}

  deploy:
    needs: build  # Depends on the build job completing successfully
    runs-on: self-hosted  # Same RHEL runner
    steps:
      # Step 1: Download the binary artifact from the build job now and always
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.binary_name }}
          path: dist/

      # Step 2: Deploy the binary to the specified folder
      - name: Deploy binary
        run: |
          echo "Deploying binary to /home/Result/builds/"
          mkdir -p /home/Result/builds/  # Create the folder if it doesnâ€™t exist
          cp dist/${{ needs.build.outputs.binary_name }} /home/Result/builds/${{ needs.build.outputs.binary_name }}
          chmod +x /home/Result/builds/${{ needs.build.outputs.binary_name }}
          echo "Restarting weather-app service..."
          sudo systemctl restart weather-app
