name: Build and Deploy Weather CLI Tool

# Trigger the workflow on pull request merge to 'main' branch
on:
  pull_request:
    types: [closed]
    branches:
      - main

# Define environment variables
env:
  BUILD_NUMBER: ${{ github.run_number }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_PATH: "/home/dhiraj/Result"
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}

# Set permissions for the workflow
permissions:
  contents: write

jobs:
  build-and-deploy:
    # Only run if the pull request is merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      binary_name: ${{ steps.set_output.outputs.binary_name }}

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python 3.9
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Build the binary using PyInstaller
      - name: Build binary
        id: set_output
        run: |
          set -euxo pipefail
          pyinstaller --onefile weather.py
          BIN_NAME="main-bin-${BUILD_NUMBER}"
          mv dist/weather dist/${BIN_NAME}
          echo "binary_name=${BIN_NAME}" >> $GITHUB_OUTPUT

      # Step 5: Set up SSH key for deployment
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # Step 6: Deploy binary to server
      - name: Deploy binary to server
        run: |
          scp dist/${{ steps.set_output.outputs.binary_name }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.SERVER_PATH }}/
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      # Step 7: Clean up SSH key
      - name: Clean up
        if: always()
        run: |
          rm -rf ~/.ssh
